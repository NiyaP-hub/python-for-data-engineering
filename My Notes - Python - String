

 Everything in Python is an object!!!
***********-=========-***************






WORKING WITH STRING (Indexing/Slicing/String Concatenation/Repeatition/Built in String Method:
**********************************************************************************************



String Creation :
            To create a string in Python you need to use either single quotes or double quotes.
                            Ex.  print('hello')
                            Ex.  print('This is also a string')

Variables: variablename= value or expression

              We use a single equals sign to assign labels to variables. Let's see a few examples of how we can do this.
              The names you use when creating these labels need to follow a few rules:
              
              1. Names can not start with a number.
              2. There can be no spaces in the name, use _ instead.
              3. Can't use any of these symbols :'",<>/?|\()!@#$%^&*~-+
              4.Are case-sensitive (Name and name are different)
              5.Can contain letters, numbers, and underscores

String Indexing:
          
              # Assign s as a string
              s = 'Hello World'
              # Print the object
              print(s) 
              print()  
              
              # Show first element (in this case a letter)
              print(s[0])
              print()
              
              # Show the second element (also a letter)
              print(s[1])

String Concatenation & Repetation:

              # concatenation (addition)
              
              s1 = 'Hello'
              s2 = "World"
              print(s1 + " " + s2)
              
              # repetition (multiplication)
              
              print("Hello_" * 5)
              print("-" * 10)


String Arithmatic :

              2**4 means 2 raised to the power of 4 i.e. 2*2*2*2 =16. Order of Operations in Python = PEMDAS
              
              PEMDAS	                               BODMAS	                                        Meaning
              P = Parentheses	                         B = Brackets	                                  () → Grouping
              E = Exponents	                         O = Orders	                                        Powers/Roots (2**3, √9)
              MD = Multiplication & Division	       DM = Division & Multiplication	                Left to right
              AS = Addition & Subtraction	             AS = Addition & Subtraction	                      Left to right

String Functions:

                len(s) → Get length
                s.upper() / s.lower() → Change case
                s.strip() → Trim whitespace
                s.replace("old", "new")
                s.split(" ") → Split into list

String Formatting/Print Formatting :

                  
                  Method 1:
                  ========
                  %s is a placeholder for a string. 
                  %d is for integers
                  %f is for floating point numbers
                  
                        Exampple 1: # Single Placeholder
                                    name="Niyatee"
                                    print("My name is %s" % name)
                        
                        Example 2 : # Multiple Placeholders
                                    name="Niyatee"
                                    age=16
                                    married=True
                        print("My name is %s, my age is %d, and it is %s that I am married" % (name, age, married))
                  
                  
                  
                  Method 2: .format() method
                  ========
                       Example:  print("Hello, {}!".format(name))

                  Method 3:Using 2. f-strings (Python 3.6+ — most preferred!)
                  ========
                  What is an f-string?
                  f-string stands for formatted string literal.
                  You add an f before your string and put variables inside {} — Python will automatically replace them with their values.
                  
                        Example 1: print(f"My name is {name}, my age is {age}. Married :{married}")
                                   output : My name is Niyatee, my age is 16.Married :True
                  
                        Example 2: print(f"My age is {age}. In 5 years I will be {age + 5}")   
                                   output : My age is 16. In 5 years I will be 21
                  


WORKING WITH DATA TYPES and DATA STRUCTURES
**********************************************************************************************

🔹 1. Data Types (Basic types of individual values)

                        Type	          Example    	    Description
                        -----------------------------------------------
                        int	          5, -1, 100	    Whole numbers
                        float	          3.14, -2.5	    Decimal numbers
                        str	          "Hello"           Text (string)
                        bool                  True,False	    Boolean values (yes/no)
                        NoneType	          None	    Represents "no value"

🔸 2. Data Structures (Ways to store and organize multiple values)

                        Structure	Example	                           Description
                        -----------------------------------------------------------------
                        list	      [1, 2, 3]	                           Ordered, changeable, allows duplicates
                        tuple   	      (1, 2, 3)	                           Ordered, unchangeable
                        set	      {1, 2, 3}	                           Unordered, no duplicates
                        dict	      {"name": "Niyatee", "age": 16}	   Key-value pairs

*Ordered : So, if you insert items in a certain order, they'll come out in that exact same order when you access or loop through them.
*Unordered: Set (Unordered). Sets don’t guarantee any order.

                        Ex. my_set = {'apple', 'banana', 'cherry'}
                            for fruit in my_set:
                            print(fruit)

                        Output :
                                    cherry
                                    apple
                                    banana
                                    The order might be different each time you run it, like:


========================

Identifying data types
a=32.40
print(type(a)) //to find out the data type of variable a

========================

LIST: 
----------

            What is a List? A list is an ordered, changeable (mutable) collection that allows duplicates. It can store: Numbers, Strings, Booleans, even other lists or mixed types.

      ✅ Example: Changing a value in a list
            fruits = ["apple", "banana", "mango"]
            print(f"Before: {fruits}")
            
            # Change the first item (index 0)
            fruits[0] = "grape"
            print(f"After: {fruits}")

            output : Before: ['apple', 'banana', 'mango']
                     After: ['grape', 'banana', 'mango']


🔧 Common List Operations:

1.) Creating lists
               Ex.1 :fruits_list = ["apple","mango","grapes"]
               Ex.2 :numbers_list = [1,2,3,4,5]
               Ex.3 :Mixed_List = [10,"hello",TRUE]

2.) Indexing  (Accessing List)
                Ex.1 : print(fruits[0])     # Output: apple
                Ex.2 : print(fruits[-1])    # Output: mango (last item)

3.) Slicing means extracting a part (or slice) of a list (or string) using index ranges.
    Syntax: list[start:stop] (start inclusive, stop exclusive)

            fruits = ["apple", "banana", "mango", "grape", "orange"]
            print(fruits[1:4])  # ['banana', 'mango', 'grape'] //1:4 means start at index 1 (banana) and go up to, but not including index 4 (orange)


4.) Modifying Items
              Ex.1: fruits_list[1]="Water Melon"
                    print(fruits_list)  //replaces mango with Water Melon


5.) Adding Items/Inserts
             Ex.1: fruits_list.append("orange")  # Add to end
             Ex.2: fruits_list.insert(1,"orange")  # Insert at position

5.) Removing Items
              Ex.1: fruits_list.remove("apple") # Remove by value
              Ex.2: fruits_list.pop()           # Remove last item
              Ex.3: del fruits[0]               # Delete by index

6.)Length of List
             Ex.1:   print(len(fruits_list))            # Number of items

7.) Extend List 
             Ex.1:    
                list1 = ["apple", "banana"]
                list2 = ["mango", "grape"]
                list1.extend(list2)
                print(list1)

            Ex.2: 
                  l = [1, 2, 3]
                  l.extend([4, 5, 6])
                  print(l)


8.) Basic List Methods

            numbers = [4, 2, 9, 1]
            numbers.sort()        # [1, 2, 4, 9]
            numbers.reverse()     # [9, 4, 2, 1]
            numbers.count(2)      # 1 (how many times 2 appears)
            numbers.index(4)      # 1 (position of 4)


9.) Looping through Lists

            for fruit in fruits:
                print(fruit)


DICTIONARY:
--------------
A dictionary is a collection of key-value pairs. It allows you to store and retrieve data based on keys (instead of positions like lists).

            
            my_dict = {
                            "name": "Alice",
                            "age": 30,
                            "city": "London"
                      }

Dictionary Operations:

1. Accessing a value by key
            Ex.print(my_dict["name"])   # Output: Alice
            Ex.my_new_dict = {'name': ["darshil", 'jac', 'rahul'], "surname": ["parmar",'asd','asdas'], "age": [25,26,27]}
               my_new_dict['name'][-1]

2. Adding or updating a value
            
            my_dict["age"] = 31           # Update existing key
            my_dict["country"] = "UK"     # Add new key

3. Removing a key-value pair
        
           del my_dict["city"]

4. Check if a key exists

            if "name" in my_dict:
                print("Found name!")

5. Looping through a dictionary

          for key, value in my_dict.items():
          print(key, ":", value)

          Example Dictionary:
            
                  student = {
                                  "id": 101,
                                  "name": "Ravi",
                                  "grades": [85, 90, 78],
                                  "is_active": True
                            }
6.Printing a Dictionary 
                      print(my_dict)
                      my_dict(key1) # Call values by their key

 Dictionary Methods:

            # Sample dictionary
            student = {
                            "name": "Riya",
                            "age": 22,
                            "course": "Python"
                      }

            Method	Description
            .get(key)	Returns value or None if not found ------    Ex.print(student.get("name"))     # Output: Riya
            .keys()	Returns all keys                   --------- Ex. print(student.keys())  # Output: dict_keys(['name', 'age', 'course'])
            .values()	Returns all values                 ----------Ex.print(student.values())  # Output: dict_values(['Riya', 22, 'Python'])
            .items()	Returns key-value pairs            ----------Ex. print(student.items()) # Output: dict_items([('name', 'Riya'), ('age', 22), ('course', 'Python')]) 
            .pop(key)	Removes key and returns its value  ----------Ex.age = student.pop("age") print(student)  # Output: {'name': 'Riya', 'course': 'Python'}
            .clear()	Empties the dictionary --------------------  Ex. student.clear() print(student)     # Output: {}
            
            Python has a built-in method of doing a self subtraction or addition (or multiplication or division). We could have also used += or -= for the above statement.
                Ex.my_dict = {'key1':'value1','key2':'value2'} 
                               my_dict['key1']=123
                               my_dict['key1'] = my_dict['key1'] + 123



SET AND BOOLEAN:
-----------------

What is a Set in Python?
A set is an unordered collection of unique elements. Think of it like a bag of distinct values — no duplicates allowed.

            my_set = {1, 2, 3, 2, 1}
            print(my_set)  # Output: {1, 2, 3}

            ✅ Why does it still output {1, 2, 3}?
            Because a set automatically removes duplicates.
            Even though we typed repeated values (2, 1), Python internally stores only the unique elements.
            So yes — the original input has duplicates, but the resulting set doesn't. That's exactly how sets work!


            x = set()        # Creates an empty set
            x.add(1)         # Adds the value 1 to the set
            print(x)         # or just write x in an interactive shell to see the result
            Note : If you try x.add(1) again, it won’t duplicate it — because sets only store unique elements.
            
            We can cast a list with multiple repeat elements to a set to get the unique elements. For example:
            # Create a list with repeats
                l = [1,1,2,2,3,4,5,6,1,1]
            # Cast as set to get unique values
                set(l)
SET Operations:

            a = {1, 2, 3}
            b = {3, 4, 5}
            
            print(a.union(b))        # {1, 2, 3, 4, 5}
            print(a.intersection(b)) # {3}
            print(a.difference(b))   # {1, 2}
            a.add(6)                 # Adds 6 to the set
            a.remove(2)              # Removes 2





What is a Boolean in Python?
A Boolean (or bool) represents True or False — just two values.

            ✅ Example:
            
            is_active = True
            is_logged_in = False
            
            Booleans are often used in conditions:
                        if is_active:
                            print("User is active.")
            
            You also get Boolean results from comparisons:
                
                        print(5 > 3)        # True
                        print(10 == 5)      # False
                        print("a" in "cat") # True
            


What is range()?

            It is a built-in function that returns a special sequence of numbers, often used for looping a specific number of times.
            It does not create a list directly — it creates a range object, which is memory-efficient and iterable.

Use Cases:

            UseCase 1. Looping a fixed number of times. Useful when you need to repeat logic 10 times.
                  for i in range(10):
                    print(f"Loop iteration {i}") #--must be indented block. 
            
            UseCase 2. Creating a list of numbers. Useful for initializing test data, dummy sequences, or indexes.
                  numbers = list(range(10))
                  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
            
            UseCase 3. Indexing over a list
                  items = ['apple', 'banana', 'cherry']
                  for i in range(len(items)):
                      print(f"Item {i}: {items[i]}")



TUPLE:
--------

A tuple is a built-in data structure in Python that:
            
            ✅ Is ordered
            ❌ Is immutable (you can't change it after creation)
            ✅ Allows duplicates
            ✅ Is indexed (like lists)

            Ex.
            my_tuple = ('apple', 'banana', 'cherry')
            print(my_tuple[1])  # Output: banana


🧾 Python Data Structures Comparison Table

Data   Structure | Ordered? | Indexed? | Mutable? | Allows Duplicates? | Syntax     | Use Case
list             | ✅ Yes   | ✅ Yes   | ✅ Yes   | ✅ Yes             | [1, 2, 3]  | For dynamic, ordered collections where items change
tuple            | ✅ Yes   | ✅ Yes   | ❌ No    | ✅ Yes             | (1, 2, 3)  | For fixed, ordered groups like coordinates or constants
set              | ❌ No    | ❌ No    | ✅ Yes   | ❌ No              | {1, 2, 3}  | For storing unique items without caring about order
dict             | ✅ Yes   | ✅ Yes   | ✅ Yes   | Keys: ❌, Values: ✅ | {'a': 1} | For mapping key-value pairs (e.g., name: age)
range            | ✅ Yes   | ✅ Yes   | ❌ No    | ✅ Yes             | range(0, 5)| For looping over numbers without storing them all



Summary:
1.Use a list when you expect to add/remove/change things.🧠 Lists are your "to-do" or "can change" things. Ex. Grocery Shopping Basket , Use when you want to add, remove, or change items.eg. add banana, remove milk,etc       
            Ex. cart = ['bananas', 'milk']
                cart.append('bread')  # add
                cart.remove('milk')   # remove
2.Use a tuple when the data is constant and should not change.🧠 Tuples are “set-in-stone” facts. Ex. Date of Birth, Loation's Latitude & Longitude
            Ex. dob = (1995, 4, 16)
            Ex. location = (28.6139, 77.2090)  # Delhi
3.Use a set when you care only about uniqueness, not order.🧠 Sets are “don’t repeat things” collections like tags or IDs, Categories.
            Ex. friends = {'Amit', 'Riya', 'Amit'}  # only one 'Amit' stays
4.Use a dict when you need key-value pairs.🧠 Dictionaries are “label → value” storages. like storing properties of something like Contact/Profile
            Ex. contact = {'name': 'Niyatee', 'age': 32, 'city': 'Manchester'}
5.Use a range when you want to loop over numbers, cleanly.🧠 Ranges are for “do something X number of times.”
             Ex.for i in range(1, 6):
                print("Try number", i)

Note : SET is not indexed
        s = {10, 20, 30}
        print(s[0])  # ❌ TypeError: 'set' object is not subscriptable.Python says: "You can't access a set item by index because I don't know what 'first' even means here!"
✅ If You Really Need Indexing, Convert It
        s = {10, 20, 30}
        s_list = list(s)
        print(s_list[0])  # Now this works as you converted it into a list, but order is not guaranteed
(Optional) Sorting the set before converting
        my_set = {3, 1, 5, 2}
        sorted_list = sorted(my_set)
        print(sorted_list[0])  # Output: 1

*Sorted is a built in Python function that works with any iterable including List, tuple, set, dic (sorts keys by default) and strings








