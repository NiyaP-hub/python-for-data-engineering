WORKING WITH STRING :


String Formatting :

Method 1:
========
%s is a placeholder for a string. 
%d is for integers
%f is for floating point numbers

      Exampple 1: # Single Placeholder
                  name="Niyatee"
                  print("My name is %s" % name)
      
      Example 2 : # Multiple Placeholders
                  name="Niyatee"
                  age=16
                  married=True
      print("My name is %s, my age is %d, and it is %s that I am married" % (name, age, married))



Method 2: .format() method
========
     Example:  print("Hello, {}!".format(name))

Method 3:Using 2. f-strings (Python 3.6+ â€” most preferred!)
========
What is an f-string?
f-string stands for formatted string literal.
You add an f before your string and put variables inside {} â€” Python will automatically replace them with their values.

      Example 1: print(f"My name is {name}, my age is {age}. Married :{married}")
                 output : My name is Niyatee, my age is 16.Married :True

      Example 2: print(f"My age is {age}. In 5 years I will be {age + 5}")   
                 output : My age is 16. In 5 years I will be 21


===================================================================================================================================

WORKING WITH ARITHMATIC :

2**4 means 2 raised to the power of 4 i.e. 2*2*2*2 =16

Order of Operations in Python = PEMDAS

PEMDAS	                               BODMAS	                                        Meaning
P = Parentheses	                         B = Brackets	                                  () â†’ Grouping
E = Exponents	                         O = Orders	                                        Powers/Roots (2**3, âˆš9)
MD = Multiplication & Division	       DM = Division & Multiplication	                Left to right
AS = Addition & Subtraction	             AS = Addition & Subtraction	                      Left to right


WORKING WITH VARIABLES  :

We use a single equals sign to assign labels to variables. Let's see a few examples of how we can do this.
The names you use when creating these labels need to follow a few rules:

1. Names can not start with a number.
2. There can be no spaces in the name, use _ instead.
3. Can't use any of these symbols :'",<>/?|\()!@#$%^&*~-+
4.Are case-sensitive (Name and name are different)
5.Can contain letters, numbers, and underscores


===================================================================================================================================

WORKING WITH DATA TYPES and DATA STRUCTURES

ðŸ”¹ 1. Data Types (Basic types of individual values)

Type	          Example    	    Description
-----------------------------------------------
int	          5, -1, 100	    Whole numbers
float	          3.14, -2.5	    Decimal numbers
str	          "Hello"           Text (string)
bool            True, False	    Boolean values (yes/no)
NoneType	    None	          Represents "no value"

ðŸ”¸ 2. Data Structures (Ways to store and organize multiple values)

Structure	Example	                           Description
-----------------------------------------------------------------
list	      [1, 2, 3]	                           Ordered, changeable, allows duplicates
tuple   	(1, 2, 3)	                           Ordered, unchangeable
set	      {1, 2, 3}	                           Unordered, no duplicates
dict	      {"name": "Niyatee", "age": 16}	   Key-value pairs





========================

Identifying data types
a=32.40
print(type(a)) //to find out the data type of variable a

========================

LIST: WORKING WITH LISTS:
What is a List?
A list is an ordered, changeable (mutable) collection that allows duplicates. It can store:

      Numbers
      Strings
      Booleans
      Even other lists or mixed types


ðŸ§º 1. List â€“ Ordered, Changeable, Allows Duplicates
      âœ… Example: Changing a value in a list

            fruits = ["apple", "banana", "mango"]
            print(f"Before: {fruits}")
            
            # Change the first item (index 0)
            fruits[0] = "grape"
            print(f"After: {fruits}")

output : Before: ['apple', 'banana', 'mango']
         After: ['grape', 'banana', 'mango']


ðŸ”§ Common List Operations:

1.) Creating lists
               Ex.1 :fruits_list = ["apple","mango","grapes"]
               Ex.2 :numbers_list = [1,2,3,4,5]
               Ex.3 :Mixed_List = [10,"hello",TRUE]

2.) Indexing  (Accessing List)
                Ex.1 : print(fruits[0])     # Output: apple
                Ex.2 : print(fruits[-1])    # Output: mango (last item)

3.) Slicing means extracting a part (or slice) of a list (or string) using index ranges.
    Syntax: list[start:stop] (start inclusive, stop exclusive)

            fruits = ["apple", "banana", "mango", "grape", "orange"]
            print(fruits[1:4])  # ['banana', 'mango', 'grape'] //1:4 means start at index 1 (banana) and go up to, but not including index 4 (orange)



4.) Modifying Items
              Ex.1: fruits_list[1]="Water Melon"
                    print(fruits_list)  //replaces mango with Water Melon


5.) Adding Items/Inserts
             Ex.1: fruits_list.append("orange")  # Add to end
             Ex.2: fruits_list.insert(1,"orange")  # Insert at position

5.) Removing Items
              Ex.1: fruits_list.remove("apple") # Remove by value
              Ex.2: fruits_list.pop()           # Remove last item
              Ex.3: del fruits[0]               # Delete by index

6.)Length of List
             Ex.1:   print(len(fruits_list))            # Number of items

7.) Extend List 
             Ex.1:    
                list1 = ["apple", "banana"]
                list2 = ["mango", "grape"]
                list1.extend(list2)
                print(list1)

            Ex.2: 
                  l = [1, 2, 3]
                  l.extend([4, 5, 6])
                  print(l)


8.) Basic List Methods

            numbers = [4, 2, 9, 1]
            numbers.sort()        # [1, 2, 4, 9]
            numbers.reverse()     # [9, 4, 2, 1]
            numbers.count(2)      # 1 (how many times 2 appears)
            numbers.index(4)      # 1 (position of 4)


9.) Looping through Lists

            for fruit in fruits:
                print(fruit)


What is range(10)?
range(10) is super commonly used in Python whenever you want to repeat something a specific number of times,
or when you need to loop through a sequence of numbers.

âœ… Common Use Cases for range()

UseCase 1. Looping a fixed number of times. Useful when you need to repeat logic 10 times.
      for i in range(10):
        print(f"Loop iteration {i}") #--must be indented block. 

UseCase 2. Creating a list of numbers. Useful for initializing test data, dummy sequences, or indexes.
      numbers = list(range(10))
      # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

UseCase 3. Indexing over a list
      items = ['apple', 'banana', 'cherry']
      for i in range(len(items)):
          print(f"Item {i}: {items[i]}")


==============
What is a Python Dictionary?
A dictionary is a collection of key-value pairs. It allows you to store and retrieve data based on keys (instead of positions like lists).


my_dict = {
    "name": "Alice",
    "age": 30,
    "city": "London"
}

âœ… Basic Operations

1. Accessing a value by key
            Ex.print(my_dict["name"])   # Output: Alice
            Ex.my_new_dict = {'name': ["darshil", 'jac', 'rahul'], "surname": ["parmar",'asd','asdas'], "age": [25,26,27]}
               my_new_dict['name'][-1]

2. Adding or updating a value
            
            my_dict["age"] = 31           # Update existing key
            my_dict["country"] = "UK"     # Add new key

3. Removing a key-value pair
        
           del my_dict["city"]

4. Check if a key exists

            if "name" in my_dict:
                print("Found name!")

5. Looping through a dictionary

      for key, value in my_dict.items():
          print(key, ":", value)

Example Dictionary:

      student = {
          "id": 101,
          "name": "Ravi",
          "grades": [85, 90, 78],
          "is_active": True
      }

ðŸ›  Common Dictionary Methods:

Method	Description
.get(key)	Returns value or None if not found ------    Ex.print(student.get("name"))     # Output: Riya
.keys()	Returns all keys
.values()	Returns all values     ----------------------Ex.print(student.values())  # Output: dict_values(['Riya', 22, 'Python'])

.items()	Returns key-value pairs
.pop(key)	Removes key and returns its value
.clear()	Empties the dictionary --------------------  Ex. student.clear() print(student)     # Output: {}

Python has a built-in method of doing a self subtraction or addition (or multiplication or division). We could have also used += or -= for the above statement. For example:
    Ex.my_dict = {'key1':'value1','key2':'value2'} 
       my_dict['key1']=123
       my_dict['key1'] = my_dict['key1'] + 123

====================================================================

Object Types in Python - Set and Boolean




