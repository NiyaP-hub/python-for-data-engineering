WORKING WITH STRING :


String Formatting :

Method 1:
========
%s is a placeholder for a string. 
%d is for integers
%f is for floating point numbers

      Exampple 1: # Single Placeholder
                  name="Niyatee"
                  print("My name is %s" % name)
      
      Example 2 : # Multiple Placeholders
                  name="Niyatee"
                  age=16
                  married=True
      print("My name is %s, my age is %d, and it is %s that I am married" % (name, age, married))



Method 2: .format() method
========
     Example:  print("Hello, {}!".format(name))

Method 3:Using 2. f-strings (Python 3.6+ â€” most preferred!)
========
What is an f-string?
f-string stands for formatted string literal.
You add an f before your string and put variables inside {} â€” Python will automatically replace them with their values.

      Example 1: print(f"My name is {name}, my age is {age}. Married :{married}")
                 output : My name is Niyatee, my age is 16.Married :True

      Example 2: print(f"My age is {age}. In 5 years I will be {age + 5}")   
                 output : My age is 16. In 5 years I will be 21


===================================================================================================================================

WORKING WITH ARITHMATIC :

2**4 means 2 raised to the power of 4 i.e. 2*2*2*2 =16

Order of Operations in Python = PEMDAS

PEMDAS	                               BODMAS	                                        Meaning
P = Parentheses	                         B = Brackets	                                  () â†’ Grouping
E = Exponents	                         O = Orders	                                        Powers/Roots (2**3, âˆš9)
MD = Multiplication & Division	       DM = Division & Multiplication	                Left to right
AS = Addition & Subtraction	             AS = Addition & Subtraction	                      Left to right


WORKING WITH VARIABLES  :

We use a single equals sign to assign labels to variables. Let's see a few examples of how we can do this.
The names you use when creating these labels need to follow a few rules:

1. Names can not start with a number.
2. There can be no spaces in the name, use _ instead.
3. Can't use any of these symbols :'",<>/?|\()!@#$%^&*~-+
4.Are case-sensitive (Name and name are different)
5.Can contain letters, numbers, and underscores


===================================================================================================================================

WORKING WITH DATA TYPES and DATA STRUCTURES

ðŸ”¹ 1. Data Types (Basic types of individual values)

Type	          Example    	    Description
-----------------------------------------------
int	          5, -1, 100	    Whole numbers
float	          3.14, -2.5	    Decimal numbers
str	          "Hello"           Text (string)
bool            True, False	    Boolean values (yes/no)
NoneType	    None	          Represents "no value"

ðŸ”¸ 2. Data Structures (Ways to store and organize multiple values)

Structure	Example	                           Description
-----------------------------------------------------------------
list	      [1, 2, 3]	                           Ordered, changeable, allows duplicates
tuple   	(1, 2, 3)	                           Ordered, unchangeable
set	      {1, 2, 3}	                           Unordered, no duplicates
dict	      {"name": "Niyatee", "age": 16}	   Key-value pairs



ðŸ§º 1. List â€“ Ordered, Changeable, Allows Duplicates
      âœ… Example: Changing a value in a list

            fruits = ["apple", "banana", "mango"]
            print(f"Before: {fruits}")
            
            # Change the first item (index 0)
            fruits[0] = "grape"
            print(f"After: {fruits}")

output : Before: ['apple', 'banana', 'mango']
         After: ['grape', 'banana', 'mango']



