PYTHON PROGRAMMING CONSTRUCTS:


Construct Type           | What It Does                        | Example
1. Sequential            | Runs code line by line in order     | Normal top-to-bottom execution
2. Conditional           | Makes decisions (if, elif, else)    | Runs code only if condition is true
3. Looping (Iteration)   | Repeats code using for or while     | Useful for repeating tasks
4. Control Statements    | Alters flow: break, continue, pass  | Skips or stops loops
5. Functions             | Reusable blocks of code (def)       | Makes code clean & modular
6. Exception Handling    | Manages errors with try, except     | Prevents crashes on errors
7. Classes/Objects       | Object-oriented programming         | Models real-world things


1. Sequential Execution:

      print("Start")
      x = 5 + 3
      print("Result:", x)
      # Runs line by line

2. Conditional (if, elif, else):
      x = 10
      if x > 0:
          print("Positive")
      elif x == 0:
          print("Zero")
      else:
          print("Negative")

3. Loops (for, while): A for loop acts as an iterator in Python, it goes through items that are in a sequence or any other iterable item. 
                      Objects that we've learned about that we can iterate over include strings,lists,tuples, and even built in iterables for dictionaries, such as the keys or values.

Syntax:  for item in iterable:
    # do something with item

Using FOR LOOP with different object types in Python:
------------------------------------------------------------------------------
**********
Note: In python indentation is very important.Python needs the print(i) line to be indented to show it's part of the for loop. Otherwise, you'll get an IndentationError.
      🧱 When do you indent in Python?
      ✅ You indent after any line that ends with a colon (:). Always indent the code inside the loop or conditional by 4 spaces or 1 tab.


            Situation                      | Example
            if, elif, else                 | if x > 0:
            for loop                       | for i in range(3):
            while loop                     | while x < 10:
            def (function)                 | def greet():
            class                          | class Dog:
            try, except, etc.              | try:, except:

***********

            1. For Loop using list:
            
                        fruits = ['apple', 'banana', 'mango']
                        for i in fruits:
                           print(i)
            
            2. For Loop using tuple:
            
                        coords = (10, 20, 30)
                        for i in coords:
                            print(i)
            
            3. For Loop using set:
            
                        colors = {'red', 'blue', 'green'}
                        for color in colors:          
                            print(color)
                        # Note: Order is NOT guaranteed. 
                        # Note: color is just a variable name, not pre-defined, can be anything.
            
            4. For Loop using dict:
            
                        person = {'name': 'Alice', 'age': 25}
                        for key in person:
                            print(key, ":", person[key])
            
                    OR
            
                       for key, value in person.items():
                       print(f"{key} => {value}")
            
            5. For Loop using range:
            
                         for i in range(3):
                             print("Loop", i)
                        
            6. For Loop using str:
            
                        word = "hello"
                        for letter in word:
                        print(letter)
            
                 Ex. # for loop
                  for i in range(3):
                      print("Hello", i)
                   -----     
                 Ex. # while loop
                  count = 0
                  while count < 3:
                      print("Hi", count)
                      count += 1
            
4. Control Statements:

      for i in range(5):
          if i == 3:
              break   # stops the loop
          if i == 1:
              continue  # skips this iteration
          print(i)
      
5.Functions:




6. Exception Handling:
        
        try:
            x = 10 / 0
        except ZeroDivisionError:
            print("You can't divide by zero!")
        
7. Classes and Objects




Using while loops:
------------------------------------------------------------------------------
while loops don’t loop over objects directly — they loop as long as a condition is true, so we use indexing or iterators to go through objects.

1. While Loop using list:
                  
                  fruits = ['apple', 'banana', 'mango']
                  i = 0
                  while i < len(fruits):
                      print(fruits[i])
                      i += 1

2. While Loop using tuple:

                  coords = (10, 20, 30)
                  i = 0
                  while i < len(coords):
                      print(coords[i])
                      i += 1

3. While Loop using set — Using iterator:
                  
                  colors = {'red', 'blue', 'green'} //This is a set containing 3 unique color strings.
                  color_iter = iter(colors)  //iter() creates an iterator object from the set. An iterator is a special object that lets you go through items one at a time using next().
                  while True:
                      try:
                          print(next(color_iter))  //gives the next item in the set.
                      except StopIteration:        //When all items are used up, next() throws a StopIteration error.
                          break

*iter() can be used with objects that are iterable i.e. an object that can return its elements one at a time
*Syntax: iterator = iter(iterable_object)
//iter() returns an iterator.
//iterable_object can be a list, tuple, str, set, dict, range, etc.
//You can then use next() to get each item one at a time.
                  
                  Ex. my_list=[1,2,3,40,50]    //creating list
                  print(type(my_list))         //checking the type of the object
                  var2=iter(my_list)           //creates iterator object
                  print(next(var2))            //Calls the built-in next() function on an iterator object named var2.
                                               //It returns the next item in the sequence.
                                               //If there are no more items, it will raise a StopIteration error.
                                               //Prints item returned by next



4. While Loop using dict — — Iterating through keys:

                  person = {'name': 'Alice', 'age': 25}
                  keys = list(person.keys())
                  i = 0
                  while i < len(keys):
                      key = keys[i]
                      print(key, ":", person[key])
                      i += 1

5. While Loop using range:

                  i = 0
                  while i < 3:
                      print("Loop", i)
                      i += 1


5. While Loop using str:

                  word = "hello"
                  i = 0
                  while i < len(word):
                      print(word[i])
                      i += 1



=====================================================================================================================

Modules , Packages and import:

Term	           Description
----------------------------
Package	     A folder with __init__.py, containing modules or sub-packages
Sub-package	     A package inside another package
Module	     A single .py file with Python code


MODULE: A module is just a single Python file (.py) containing functions, classes, or variables. It's for any kind of reusable code
A module = any Python file that contains code you might want to use in other scripts. It's just a way to organize your code so it's clean, reusable, and easy to maintain.
Example: If you create a file called math_utils.py with a function inside, that’s a module.
                  # math_utils.py
                  def add(a, b):
                      return a + b

✅ Use a Module when:
Your code is small or focused on a single task or utility.
You want to organize helper functions or classes in one file.

USE CASES:
           1. 🔧 Utility Modules:
                        string_utils.py → string formatting or validation
                        file_utils.py → reading/writing files 

            2.💻 Application Logic:
                        auth.py → user login/logout functions
                        email_sender.py → sending emails via SMTP
            
            3.📊 Data Handling:
                        data_cleaning.py → preprocessing data 
                        plotting.py → generating graphs
                        
            4.📱 Web Apps:
                        routes.py → Flask/Django routes
                        forms.py → web form validation
                        

PACKAGE:A package is a folder (directory) that contains one or more related Python modules, and usually an __init__.py file (which tells Python it's a package).

Think of it like a toolbox:
      Each tool = a module (a .py file)
      The toolbox = the package (a folder)
Use a package when:

            Your project has many files/modules.
            You want to organize related code together.
            It makes large projects cleaner and easier to maintain.

Example 1:
            email_package/          ← This is the package
            │
            ├── __init__.py         ← Marks it as a Python package
            ├── send_email.py       ← Module for sending emails
            ├── validate_email.py   ← Module for checking valid email formats
            └── templates.py        ← Module for email templates

You can then import and use it like:
            
            from email_package import send_email, validate_email
            
            send_email.send(...)

Example 2:

            ecommerce/
            ├── __init__.py
            ├── products.py
            ├── cart.py
            ├── checkout.py
            └── users/
                ├── __init__.py
                ├── login.py
                └── profile.py

Example 3:
🔁 Think of it like folders inside folders:
            
            my_app/                 ← Main package
            │
            ├── __init__.py
            ├── auth/               ← Sub-package
            │   ├── __init__.py
            │   ├── login.py
            │   └── register.py
            │
            ├── payments/           ← Sub-package
            │   ├── __init__.py
            │   ├── gateway.py
            │   └── invoices.py
            │
            └── utils.py            ← Just a module

Now you can import like:
      
      from my_app.auth import login
      from my_app.payments.gateway import process_payment


NAMESPACE:
A namespace is like a labeled box that holds names (like variables, functions, classes) and keeps them organized so they don’t clash with each other.

Namespace Type	What it holds
------------------------------------------------------------
Built-in	      Python's core functions like len(), print()
Global	      Names defined at the top level of your script
Local	            Names inside a function or method
Module	      Names defined inside a specific imported module

