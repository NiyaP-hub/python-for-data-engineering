==========Code============
import pandas as pd                //import/load the pandas library (a tool for working with tables). pd is the alias
df = pd.read_csv("sales.csv")      //Use pandas (alias pd) to read the file named sales.csv, and store it in a variable called df.
print(df.head())                   //shows just the top of the table (5 rows). 
                                   // df = short for DataFrame — a table of data (like a mini Excel sheet)

==========================
*PANDAS library is used to work with structured data — like tables in Excel, CSV, SQL, APIs that return structured data

USE CASE : Read, clean, transform, join, summarize, or analyze structured data.
    
       - You have CSV/Excel/SQL data	Read and load the data
       - Data has missing values	Fill or remove them
       - You need to filter rows/columns	Use slicing or conditions
       - You want to summarize	Use groupby, mean, sum, etc.
       - You want to join tables	Use merge() like SQL JOIN
       - You’re automating reports	Script it once, re-run anytime
       - Excel is slow with big data	pandas handles large datasets faster


=========================


NOTE: Pandas must be installed in your machine through command prompt :

    pip install pandas  //pip is Python’s package installer.This command uses pip to install the pandas library.


IF you get a message saying could not found pip, it means your Python installation is missing the pip tool, 
which is used to install packages like pandas

To install Pandas:

    which python3   //Check Which Python You’re Using

    Output might be: 

    /usr/bin/python3           //The macOS system Python.Not recommended (restricted, outdated)
    or
    /opt/homebrew/bin/python3  //Python installed via Homebrew.
    or
    /usr/local/bin/python3     //Python installed via python.org installer

python3 -m ensurepip --upgrade   // This asks Python to install pip if it’s missing.

python3 -m pip install pandas  //next , install pandas

===============================EXECUTING PYTHON CODE=====================

OPTION 1: TO EXECUTE CODE IN Visual Studio Code :

Open new editor and save as .py 
Type the code in this editor
By default , VSCode will look for the file in the current folder (i.e. where your python code (.py) file is saved)
In order to find your current folder - > In VS Code Editor , go to Terminal (top ribbon) ->New Terminal -> pwd (gives your current directory)
      e.g. /Users/niya/Documents/python-learning
If the csv file is not in the current folder, you need to give full path in your command:
      df = pd.read_csv("/Users/niya/Desktop/data/sales.csv")


OPTION 2: TO EXECUTE CODE IN TERMINAL :

python3  //Tells Terminl I want to use Python 3 interpreter to run a Python command or script.

e.g.1: python3 
       my_script.py

e.g.2:  python3 ///Tells Terminl I want to use Python 3 interpreter to run a Python command or script. Next, type your code

        import pandas as pd  //
        df = pd.read_csv("sales.csv")
        print(df.head())

OPTION 3: TO EXECUTE CODE IN JUPYTER NOTEBOOK :



===========================================PANDAS FUNCTIONS==================

Working with CSV:

//Load CSV
      import pandas as p
      df=p.read_csv("/Users/niyatee/Documents/PYTHON/apple_products.csv")
      print(df.head())

//View Basic Info

      print(df.info())

//Filtering Options

      print(df[df["In Stock"]==True])
      print(df[df["Price"]> 1000])


//Create New Column
  //Prints 2 separate Series, one below the other
      df["New_Col_revenue"] = df["Price"] * df["Units Sold"]   
      print(df["Product"],df["New_Col_revenue"])   

  //Prints a DataFrame with both columns side-by-side 
      df["New_Col_revenue"] = df["Price"] * df["Units Sold"]   
      print(df[["Product", "New_Col_Revenue"]])	  

-----
Code	                        What it Does
df["Column"]	                      //Returns a Series (single column)
df[["Col1", "Col2"]]	              //Returns a DataFrame with both columns side by side
print(df["Col1"], df["Col2"])	      //Prints them one after another — not aligned
----

//Save Filtered Data to a New CSV

expensive_products = df[df["Price"] > 1000]  
expensive_products.to_csv("expensive_products.csv", index=False)    //pandas function to save data in CSV format. index=False tells not to include row numbers in 
                                                                    //the saved file


df["Price"].max()                      //max value from this series (i.e. column)

df["Price"].min()                      //min value from this series (i.e. column)

df[df["Price"]==1799]                  //filter equal to 
 
df[df["Price"]<500]                    //filter less than to find which products are less than 500

df["Product"]                          //to get the series (vertical list) of just one column 

list(df["Product"])                    //to display column as a list like an array (i.e. displays column values horizontally separated by commas)

list(df["Product"] [0]                 //displays the 1st value from the list

lsit(df["Product"] [3]                 //displays the 4th value in the last

lsit(df["Product"] [0].upper()         //displays first value from the list in UPPER CASE

lsit(df["Product"] [0].lower()         //displays first value from the list in LOWER CASE

list(df["Product"] [3].upper() [6:11]  //displays 4th value from the list in UPPER CASE and just the string from 6th to 11th 
                                         i.e for APPLE WATCH will only display WATCH














